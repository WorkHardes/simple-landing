[tool.poetry]
name = "andrew-site"
version = "0.1.0"
description = ""
authors = ["Work Hardes <arckadyor34@google.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.110.0"
pydantic = "^2.6.4"
granian = "^1.2.0"


[tool.poetry.group.dev.dependencies]
ruff = "^0.3.3"
mypy = "^1.9.0"
pre-commit = "^3.6.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
python_version = "3.11"
ignore_missing_imports = true
warn_no_return = false
warn_unreachable = true
warn_incomplete_stub = true
warn_unused_configs = true
plugins = ["pydantic.mypy"]
exclude = [".git", ".mypy_cache", ".ruff_cache", ".venv", "services"]

[tool.ruff]
exclude = [".git", ".mypy_cache", ".ruff_cache", ".venv", "services"]
line-length = 95
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
ignore-init-module-imports = true
select = [
    "F",     # pyflakes
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "EM",    # flake8-errmsg
    "ISC",   # flake8-implicit-str-concat
    "PIE",   # flake8-pie
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "SLF",   # flake8-self
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "PGH",   # pygrep-hooks
    "PLC",   # pylint convention
    "PLE",   # pylint error
    "PLR",   # pylint refactor
    "PLW",   # pylint warning
    "TRY",   # tryceratops
    "FLY",   # flynt
    "RUF",   # Ruff-specific rules
]
ignore = [
    "ANN002",  # Missing type annotation for *args
    "ANN003",  # Missing type annotation for **kwargs
    "ANN101",  # Missing type annotation for self in method
    "ANN102",  # Missing type annotation for cls in classmethod
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed in model
    "A003",    # class attribute `` is shadowing a Python builtin
    "ARG001",  # Unused function argument: body
    "PTH123",  # open("foo") should be replaced by Path("foo").open()
    "PLR0912", # Too many branches
    "PLR0913", # Too many function arguments
    "PLR0915", # Too many statements
    "PLW0603", # Using the global statement to update `` is discouraged
    "TRY300",  # Checks for return statements in try blocks.
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
# imported but unused; consider adding to __all__ or using a redundant alias
"__init__.py" = ["F401"]
# Missing return type annotation for public function get_settings
"src/core/settings.py" = ["ANN201"]

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "fastapi.Depends",
    "fastapi.params.Depends",
    "fastapi.Query",
    "fastapi.params.Query",
]
